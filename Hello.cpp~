//===- Hello.cpp - Example code from "Writing an LLVM Pass" ---------------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file implements two versions of the LLVM "Hello World" pass described
// in docs/WritingAnLLVMPass.html
//
//===----------------------------------------------------------------------===//

#include "llvm/ADT/Statistic.h"
#include "llvm/IR/Function.h"
#include "llvm/Pass.h"
#include "llvm/Support/raw_ostream.h"
#include <map>
using namespace llvm;

#define DEBUG_TYPE "opcodeCounter"

STATISTIC(Counter, "Counts number of functions greeted");

namespace {
  // Hello - The first implementation, without getAnalysisUsage.
  struct Counter : public FunctionPass {
    static char ID; // Pass identification, replacement for typeid
    Hello() : FunctionPass(ID) {}
    std::map<std::string, int> opcodeCounter;
    bool runOnFunction(Function &F) override {
      outs() <<"Function " << F.getName() << '\n';
      for (Function::iterator bb = F.begin(), e = F.end(); bb != e;
	   ++bb)
	{
	  for (BasicBloc::iterator i = bb->begin(), e = bb->end();
	       i != e; ++i)
	    {
	      if (opcodeCounter.find(1->getOpcodeName()) ==
		  opcodeCounter.end())
		{
		  opcodeCounter[i->getOpcodeName()] = 1;
		}
	      else
		{
		  opcodeCounter[i->getOpcodeName()] += 1;
		}
	    }
	}

      std::map<std::string, int>::iterator i = opcodeCounter.begin();
      std::map<std::string, int>::iterator e = opcodeCounter.end();
      whiel(i != e)
	{
	  outs() << i->first << ": " << i->second << "\n";
	  i++;
	}

      outs() << "\n";
      opcodeCounter.clear();
      return false;
    }
  };
}


char Counter::ID = 0;
static RegisterPass<Counter> X("opcodeCounter", "Hello World Pass");
