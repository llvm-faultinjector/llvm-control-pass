#include "llvm/IR/Function.h"
#include "llvm/Pass.h"
#include "llvm/Support/raw_ostream.h"
#include "llvm/Analysis/LoopInfo.h"
#include <vector>

using namespace llvm;

namespace {
  struct LoopCheck : public FunctionPass {
    static char ID;
    virtual void getAnalysisUsage(AnalysisUsage &AU) const {
AU.addRequired<LoopInfoWrapperPass>();
    }
    LoopCheck() : FunctionPass(ID) {}
    bool runOnFunction(Function &F) override {
      LoopInfo *LI = &getAnalysis<LoopInfoWrapperPass>().getLoopInfo();\
      //getAnalysis<LoopInfoWrapperPass>().print(errs());
      errs() << "\n";
      errs() << "Function " << F.getName() +"\n";
      for (Loop *L :*LI)
        InLoop(L, 0);
      errs() << "\n";
      return false;
    }
    void InLoop(Loop *L, unsigned nest)
    {
      errs() << "Level(" << nest << ")\n";
      BasicBlock *header = L->getHeader();
      errs() << " Header Block: " << header->getName() << "\n";
      BasicBlock::iterator h_iter;
      for ( h_iter = header->begin(); h_iter != header->end(); ++h_iter)
	{
	  if (CmpInst *cmpInst = dyn_cast<CmpInst>(&*h_iter))
	    {
	      InBranch(cmpInst);
	    }
	  h_iter->print(errs());
	  errs() << "\n";
	}
      
      std::vector<Loop *> subLoops = L->getSubLoops();
      Loop::iterator j, f;
      for (j = subLoops.begin(), f = subLoops.end(); j != f; ++j)
        InLoop(*j, nest + 1);
    }
    void InBranch(CmpInst *cmpInst)
    {
      /*
      switch(cmpInst->getPredicate())
	{
	  
	case CmpInst::ICMP_SGT: // Set on Greater Than
	case CmpInst::ICMP_SLT: // Branch on Lower Than
	  break;
	}*/
      /*errs() << cmpInst->getNumOperands()  << cmpInst->getOperand(0)->getName() <<
	" " << cmpInst->getOperand(1)->getName() << "\n";*/
      PrintValue(cmpInst->getOperand(0));
      errs() << " ";
      PrintValue(cmpInst->getOperand(1));
      errs() << "\n";
    }
    void PrintValue(Value *v)
    {
      if (ConstantInt *CI = dyn_cast<ConstantInt>(&*v))
	{
	  //errs() << CI->getSExtValue() << "\n";
	}
    }
  };
}

char LoopCheck::ID = 0;
static RegisterPass<LoopCheck> X("loopcheck", "Hello World Pass");
